locals {
  artifact = "${path.module}/../bin/{{.opts.App.Name}}.zip"
}

{{if eq .opts.App.Event "dynamodb" -}}
resource "aws_dynamodb_table" "table_1" {
  name             = "example-dynamodb-table-1"
  hash_key         = "UserId"
  read_capacity    = 1
  stream_enabled   = true
  stream_view_type = "KEYS_ONLY"
  write_capacity   = 1

  attribute {
    name = "UserId"
    type = "S"
  }
}
{{end -}}

{{if eq .opts.App.Event "kinesis" -}}
resource "aws_kinesis_stream" "stream_1" {
  name        = "example-kinesis-stream-1"
  shard_count = 1
}
{{end -}}

{{if eq .opts.App.Event "s3" -}}
data "aws_s3_bucket" "example" {
  bucket = "replace-me-with-existing-bucket"
}
{{end -}}

{{if eq .opts.App.Event "sns" -}}
resource "aws_sns_topic" "topic_1" {
  name = "example-sns-topic-1"
}
{{end -}}

{{if eq .opts.App.Event "sqs" -}}
resource "aws_sqs_queue" "queue_1" {
  name = "example-sqs-queue-1"
}
{{end -}}

module "{{.opts.App.Name}}" {
  source  = "{{.opts.Terraform.Module.Source}}"
  version = "{{.opts.Terraform.Module.Version}}"

  description      = "bootstrapped Lambda, powered by func"
  filename         = local.artifact
  function_name    = "{{.opts.App.Name}}"
  handler          = "{{.opts.App.Name}}"
  runtime          = "go1.x"
  source_code_hash = filebase64sha256(local.artifact)

  {{if eq .opts.App.Event "cloudwatch-event" -}}
  // see https://github.com/moritzzimmer/terraform-aws-lambda/tree/master/examples/with-cloudwatch-event-rules for details
  cloudwatch_event_rules = {
    scheduled = {
      schedule_expression = "rate(1 minute)"
    }

    pattern = {
      event_pattern = <<PATTERN
      {
        "detail-type": [
          "AWS Console Sign In via CloudTrail"
        ]
      }
      PATTERN
    }
  }
  {{end -}}

  {{if eq .opts.App.Event "dynamodb" -}}
  // see // see https://github.com/moritzzimmer/terraform-aws-lambda/tree/master/examples/with-event-source-mappings/dynamodb for details
  event_source_mappings = {
    table_1 = {
      event_source_arn  = aws_dynamodb_table.table_1.stream_arn
    }
  }
  {{end -}}

  {{if eq .opts.App.Event "kinesis" -}}
  // see https://github.com/moritzzimmer/terraform-aws-lambda/tree/master/examples/with-event-source-mappings/kinesis for details
  event_source_mappings = {
    stream_1 = {
      event_source_arn = aws_kinesis_stream.stream_1.arn
    }
  }
  {{end -}}

  {{if eq .opts.App.Event "sns" -}}
  // see https://github.com/moritzzimmer/terraform-aws-lambda/tree/master/examples/with-sns-subscriptions for details
  sns_subscriptions = {
    topic_1 = {
      topic_arn = aws_sns_topic.topic_1.arn
    }
  }
  {{end -}}

  {{if eq .opts.App.Event "sqs" -}}
  // see https://github.com/moritzzimmer/terraform-aws-lambda/tree/master/examples/with-event-source-mappings/sqs for details
  event_source_mappings = {
    queue_1 = {
      event_source_arn = aws_sqs_queue.queue_1.arn
    }
  }
  {{end -}}
}

{{if eq .opts.App.Event "s3" -}}
resource "aws_s3_bucket_notification" "bucket_notification" {
  bucket = data.aws_s3_bucket.example.id

  lambda_function {
    lambda_function_arn = module.{{.opts.App.Name}}.arn
    events              = ["s3:ObjectCreated:*"]
  }
}
{{end -}}
